0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', '-g', 'ant' ]
2 info using npm@2.11.2
3 info using node@v0.12.5
4 verbose install initial load of /usr/local/lib/package.json
5 verbose readDependencies loading dependencies from /usr/local/lib/package.json
6 silly cache add args [ 'ant', null ]
7 verbose cache add spec ant
8 silly cache add parsed spec { raw: 'ant',
8 silly cache add   scope: null,
8 silly cache add   name: 'ant',
8 silly cache add   rawSpec: '',
8 silly cache add   spec: '*',
8 silly cache add   type: 'range' }
9 silly addNamed ant@*
10 verbose addNamed "*" is a valid semver range for ant
11 silly addNameRange { name: 'ant', range: '*', hasData: false }
12 silly mapToRegistry name ant
13 silly mapToRegistry using default registry
14 silly mapToRegistry registry https://registry.npmjs.org/
15 silly mapToRegistry uri https://registry.npmjs.org/ant
16 verbose addNameRange registry:https://registry.npmjs.org/ant not in flight; fetching
17 verbose request uri https://registry.npmjs.org/ant
18 verbose request no auth needed
19 info attempt registry request try #1 at 10:11:59 PM
20 verbose request id a5d988daeb1d8dd6
21 http request GET https://registry.npmjs.org/ant
22 http 200 https://registry.npmjs.org/ant
23 silly get cb [ 200,
23 silly get   { server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
23 silly get     etag: '"TN23NFW5A1M0GM4CCK0CRIG7"',
23 silly get     'content-type': 'application/json',
23 silly get     'cache-control': 'max-age=60',
23 silly get     'content-length': '9182',
23 silly get     'accept-ranges': 'bytes',
23 silly get     date: 'Thu, 24 Sep 2015 03:12:00 GMT',
23 silly get     via: '1.1 varnish',
23 silly get     age: '0',
23 silly get     connection: 'keep-alive',
23 silly get     'x-served-by': 'cache-ord1726-ORD',
23 silly get     'x-cache': 'MISS',
23 silly get     'x-cache-hits': '0',
23 silly get     'x-timer': 'S1443064320.022970,VS0,VE261',
23 silly get     vary: 'Accept' } ]
24 verbose get saving ant to /Users/Sachin/.npm/registry.npmjs.org/ant/.cache.json
25 silly addNameRange number 2 { name: 'ant', range: '*', hasData: true }
26 silly addNameRange versions [ 'ant', [ '0.0.0', '0.2.0' ] ]
27 silly addNamed ant@0.2.0
28 verbose addNamed "0.2.0" is a plain semver version for ant
29 silly mapToRegistry name ant
30 silly mapToRegistry using default registry
31 silly mapToRegistry registry https://registry.npmjs.org/
32 silly mapToRegistry uri https://registry.npmjs.org/ant
33 verbose addRemoteTarball https://registry.npmjs.org/ant/-/ant-0.2.0.tgz not in flight; adding
34 verbose addRemoteTarball [ 'https://registry.npmjs.org/ant/-/ant-0.2.0.tgz',
34 verbose addRemoteTarball   'f4abbe0d6f9cc4f63db5d3a557450288a0f0a394' ]
35 info retry fetch attempt 1 at 10:12:00 PM
36 info attempt registry request try #1 at 10:12:00 PM
37 http fetch GET https://registry.npmjs.org/ant/-/ant-0.2.0.tgz
38 http fetch 200 https://registry.npmjs.org/ant/-/ant-0.2.0.tgz
39 silly fetchAndShaCheck shasum f4abbe0d6f9cc4f63db5d3a557450288a0f0a394
40 verbose addTmpTarball /var/folders/6j/vfnhxjp5387dj3c26wb_y6mm0000gn/T/npm-6580-f04fee41/registry.npmjs.org/ant/-/ant-0.2.0.tgz not in flight; adding
41 verbose addTmpTarball already have metadata; skipping unpack for ant@0.2.0
42 silly cache afterAdd ant@0.2.0
43 verbose afterAdd /Users/Sachin/.npm/ant/0.2.0/package/package.json not in flight; writing
44 verbose afterAdd /Users/Sachin/.npm/ant/0.2.0/package/package.json written
45 silly install resolved [ { name: 'ant',
45 silly install resolved     description: 'Apache Ant Adapter, execute Ant tasks from node',
45 silly install resolved     keywords: [ 'ant', 'build', 'java' ],
45 silly install resolved     homepage: 'http://github.com/millermedeiros/node-ant/',
45 silly install resolved     version: '0.2.0',
45 silly install resolved     author:
45 silly install resolved      { name: 'Miller Medeiros',
45 silly install resolved        url: 'http://blog.millermedeiros.com/' },
45 silly install resolved     repository:
45 silly install resolved      { type: 'git',
45 silly install resolved        url: 'https://github.com/millermedeiros/node-ant.git' },
45 silly install resolved     main: 'index.js',
45 silly install resolved     bugs: { url: 'https://github.com/millermedeiros/node-ant/issues' },
45 silly install resolved     licenses: [ [Object] ],
45 silly install resolved     engines: { node: '~0.8.0' },
45 silly install resolved     readme: '# node-ant\n\nExperimental [Apache Ant](http://ant.apache.org/) adapter for\n[node.js](http://nodejs.org).\n\nThis is a proof-of-concept more than anything else. Still unsure if it will\nactually work on multiple environments and if it is really a good idea.\n\n\n\n## Why?\n\nMany people been using [node.js to run build\nscripts](http://blog.millermedeiros.com/node-js-as-a-build-script/) and\neveryone is writting the same tasks for the most basic stuff like\ncopying/concateneting/deleting/ziping files and it will take a long time before\n*someone* implements [all the tasks present on\nAnt](http://ant.apache.org/manual/tasksoverview.html).\n\nProjects like [grunt](https://github.com/cowboy/grunt),\n[gear](https://github.com/yahoo/gear), [jake](https://github.com/mde/jake),\n[rivet](https://github.com/jaredhanson/rivet),\n[roto](https://github.com/diy/roto) and many others are all writting their own\ntasks to do the same things. TBH I think a better approach would be to create\nseparate libs that could do each task (or a group of tasks) and that wasn\'t\ntied to a specific build tool, and create tools that abused this (no need to\nconvert 3rd party lib into a plugin or author a new module just to use the\nmethods inside your build files).\n\nAnt contains [many advanced tasks](http://ant.apache.org/manual/tasksoverview.html)\nand is *battle tested* so it makes sense to reuse them instead of reinventing\nthe wheel.\n\nAnt is also not that easy to install on Windows since you need to configure the\n`ANT_HOME`, `CLASSPATH` and `JAVA_HOME` paths. So it\'s easier to use\na standalone version of Ant that is distributed together with the\n[npm](http://npmjs.org) package. The Java Runtime is avaialble on most\ncomputers so calling the ant executable should work out of the box on most\ncases.\n\nThe idea is not to write multiple ant `<target>`s, but to treat Ant as\na standalone lib that can be called from a node.js script. Performance isn\'t\nthat great (since JVM isn\'t as fast as node) but it is still better than\nwritting error-prone tasks that gets half of the job done.\n\nBuild tools based solely on configuration are doomed to "fail" the same way as\nAnt did "failed". You can\'t express all edge-cases with configuration without\ncreating an overly complex system. Some things that could be easily done with\na `for` loop and a few `if/else` are a huge PITA with a descriptive syntax\n(XML/JSON). The main reason why I moved my build scripts to node.js is to the\nget freedom to write new tasks by myself without major pains, locking down your\nbuild to a system that can only be extended by writting plugins that accepts\na simple config object won\'t scale up. Let\'s use Ant for what it is good for\n(broad amount of battle tested tasks with flexible config options) and use\nplain JavaScript for those tasks that aren\'t covered by Ant.\n\nMaybe this project will motivate someone to port the most important Ant tasks\nto plain JavaScript. I still haven\'t found a single node task that is as\ncomplete the ones provided by Ant, see for instance all the options available\non the [copy task](http://ant.apache.org/manual/Tasks/copy.html) (multiple\n`include`/`exclude`, `filter`, `globmapper`, download internet files,\n`flatten`, etc...).\n\n\n\n## How?\n\nThe idea is to use the Ant as if it was a standalone library that can be called\nfrom node.js, that way you can reuse them in your custom node.js build files\nwhen necessary.\n\nIt will simply convert JSON-like objects into a temporary XML file and execute\nthe standalone version of Ant passing the custom arguments. This tool is just\na "bridge" between Node.js and the Ant JAR file.\n\n\n\n## Example\n\nExecute the test file to see a very basic example:\n\n    node test\n\nYou can run it from another node.js program:\n\n```js\nvar ant = require(\'ant\');\n\nant.exec({\n    // concat task (http://ant.apache.org/manual/Tasks/concat.html)\n    concat : {\n        fileset : {\n            \'@dir\' : \'.\',\n            include : {\n                \'@name\' : \'*.js\'\n            }\n        }\n    }\n}, function(err, stdout, stderror){\n    // it doesn\'t throw any errors and also doesn\'t log the stdout by\n    // default that way you can control what you want to do.\n    if (stdout) console.log(stdout);\n    if (stderror) console.log(stderror);\n    if (err) throw err;\n});\n```\n\n\n\n## Documentation\n\nRight now it contains a single method `exec()` that accepts an object with each\ntask and a callback. The tasks are just JSON-like representation of the XML\nmarkup needed to execute each task, `node-ant` will convert it back to XML\nduring the `exec`.\n\n\n### `ant.exec(tasks, [args], callback)`\n\n - **tasks**:\n   - JSON-like object containing Ant tasks to be executed.\n - **[args]**:\n   - Command line arguments passed to the ant executable.\n - **callback**\n   - Function executed after `exec` finishes. Will receive the following\n     arguments: (err, stdout, stderr).\n\n\n### JXON syntax\n\nAttributes starts with `@`.\n\n    > { foo : { \'@bar\' : 123 }}\n    <foo bar="123" />\n\nThe XML node text value is stored as the actual key value if node doesn\'t\ncontain attributes and/or child nodes or on a special property `keyValue`.\n\n    > {\n        foo : \'Lorem Ipsum\'\n    }\n    <foo>Lorem Ipsum</foo>\n\n    > {\n        foo : {\n            \'@bar\' : 123,\n            keyValue : \'Lorem Ipsum\'\n        }\n    }\n    <foo bar="123">Lorem Ipsum</foo>\n\n    > {\n        concat : {\n            fileset : {\n                \'@dir\' : \'.\',\n                include : {\n                    \'@name\' : \'*.js\'\n                }\n            }\n        }\n    }\n    <concat><fileset dir="."><include name="*.js" /></fileset></concat>\n\nUse the [Ant tasks\ndocumentation](http://ant.apache.org/manual/tasksoverview.html) as reference.\n\n\n\n## Important\n\nThis project is on early experimental phase. The way that `ant.exec` is called\nmight change in the future, specially since the\n[JXON](https://developer.mozilla.org/en/JXON) format currently used doesn\'t\nallow XML nodes with same name that aren\'t adjacent to each other (object can\'t\nhave multiple properties with the same key). So I might end up changing the\nformat to something closer to [JSONML](http://www.jsonml.org/) or use some sort\nof special token to differentiate duplicates (eg. `echo#1`, `echo#2`).\n\n\n\n## TODO\n\n - Test on a computer that doesn\'t have JDK installed.\n - Check if it is possible to ship with a standalone version of JDK for the\n   advanced tasks.\n - Make it possible to log to console without waiting the whole task to finish.\n\n\n\n## Requirements\n\n - node.js 0.8.0+\n - Java\n - JDK 1.4+ (depending on which task you use)\n\n\n\n## Changelog\n\n### v0.2.0 (2012/08/03)\n\n - add support to functions on tasks (for [script](http://ant.apache.org/manual/Tasks/script.html) task). [Thanks to @Diullei](https://gist.github.com/3245017)\n - small refactor to jxon to improve readability and autoclose empty tags.\n\n\n### v0.1.0 (2012/08/02)\n\n - initial release.\n\n\n\n## License\n\nnode-ant is distributed under the MIT license.\n\nApache Ant is distributed under the Apache License.\n',
45 silly install resolved     _id: 'ant@0.2.0',
45 silly install resolved     dist:
45 silly install resolved      { shasum: 'f4abbe0d6f9cc4f63db5d3a557450288a0f0a394',
45 silly install resolved        tarball: 'http://registry.npmjs.org/ant/-/ant-0.2.0.tgz' },
45 silly install resolved     maintainers: [ [Object] ],
45 silly install resolved     directories: {},
45 silly install resolved     _shasum: 'f4abbe0d6f9cc4f63db5d3a557450288a0f0a394',
45 silly install resolved     _resolved: 'https://registry.npmjs.org/ant/-/ant-0.2.0.tgz',
45 silly install resolved     _from: 'ant@*' } ]
46 info install ant@0.2.0 into /usr/local/lib
47 info installOne ant@0.2.0
48 verbose installOne of ant to /usr/local/lib not in flight; installing
49 warn locking Error: EACCES, open '/Users/Sachin/.npm/_locks/ant-763e091fbf42ab06.lock'
49 warn locking     at Error (native)
49 warn locking  /Users/Sachin/.npm/_locks/ant-763e091fbf42ab06.lock failed { [Error: EACCES, open '/Users/Sachin/.npm/_locks/ant-763e091fbf42ab06.lock']
49 warn locking   errno: -13,
49 warn locking   code: 'EACCES',
49 warn locking   path: '/Users/Sachin/.npm/_locks/ant-763e091fbf42ab06.lock' }
50 verbose stack Error: Attempt to unlock /usr/local/lib/node_modules/ant, which hasn't been locked
50 verbose stack     at unlock (/usr/local/lib/node_modules/npm/lib/utils/locker.js:66:11)
50 verbose stack     at cb (/usr/local/lib/node_modules/npm/lib/install.js:1017:5)
50 verbose stack     at /usr/local/lib/node_modules/npm/lib/install.js:1021:20
50 verbose stack     at /usr/local/lib/node_modules/npm/lib/utils/locker.js:40:9
50 verbose stack     at cb (/usr/local/lib/node_modules/npm/node_modules/lockfile/lockfile.js:149:38)
50 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/lockfile/lockfile.js:177:38
50 verbose stack     at FSReqWrap.oncomplete (fs.js:95:15)
51 verbose cwd /Users/Sachin/Documents/StudentAdvisor
52 error Darwin 14.5.0
53 error argv "node" "/usr/local/bin/npm" "install" "-g" "ant"
54 error node v0.12.5
55 error npm  v2.11.2
56 error Attempt to unlock /usr/local/lib/node_modules/ant, which hasn't been locked
57 error If you need help, you may report this error at:
57 error     <https://github.com/npm/npm/issues>
58 verbose exit [ 1, true ]
